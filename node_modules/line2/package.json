{
  "_args": [
    [
      {
        "raw": "line2@^0.2.1",
        "scope": null,
        "escapedName": "line2",
        "name": "line2",
        "rawSpec": "^0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon"
    ]
  ],
  "_from": "line2@>=0.2.1 <0.3.0",
  "_id": "line2@0.2.1",
  "_inCache": true,
  "_location": "/line2",
  "_npmUser": {
    "name": "tmpvar",
    "email": "tmpvar@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "line2@^0.2.1",
    "scope": null,
    "escapedName": "line2",
    "name": "line2",
    "rawSpec": "^0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/polygon"
  ],
  "_resolved": "https://registry.npmjs.org/line2/-/line2-0.2.1.tgz",
  "_shasum": "3bbd1bb47b5f307009caa526c7261ad1c237adf8",
  "_shrinkwrap": null,
  "_spec": "line2@^0.2.1",
  "_where": "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon",
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tmpvar/line2/issues"
  },
  "dependencies": {
    "segseg": "~0.2.1",
    "vec2": "~1.3.4"
  },
  "description": "perform operations on infinite lines in 2 dimensions",
  "devDependencies": {
    "istanbul": "*",
    "mocha": "1.x"
  },
  "directories": {},
  "dist": {
    "shasum": "3bbd1bb47b5f307009caa526c7261ad1c237adf8",
    "tarball": "https://registry.npmjs.org/line2/-/line2-0.2.1.tgz"
  },
  "homepage": "https://github.com/tmpvar/line2#readme",
  "keywords": [
    "line",
    "2d",
    "geometry",
    "infinite"
  ],
  "license": "MIT",
  "main": "line2.js",
  "maintainers": [
    {
      "name": "tmpvar",
      "email": "tmpvar@gmail.com"
    }
  ],
  "name": "line2",
  "optionalDependencies": {},
  "readme": "# line2\n\n## install\n\n`npm install line2`\n\nor include it in a script tag in the browser\n\n## use\n\n```javascript\n\nvar Line = require('line2');\n\nvar l = new Line(0, 0, 10, 10);\n\nconsole.log(l.slope(), l.yintercept(), l.xintercept()); // 1 0 0\n\n```\n\n\n### api surface\n\n__Line2(x1, y1, x2, y2)__ or __Line2(slope, yIntercept)__\n\nreturns a new `Line2`\n\n__change(fn)__\n\nadd an observer that will be notified of any change.\n\n_callback signature_: `function(line) {}`\n\n__ignore([fn])__\n\nRemoves a listener, if no `fn` is passed remove them all.\n\n__notify()__\n\nCall all of the listeners, manually.\n\n__yintercept([y])__\n\nreturn the computed y-intercept or `null` if verical\n\nWhen `y` is passed it will set the y-intercept of this line and the x-intercept if appropriate (not horizontal)\n\n__xintercept([x])__\n\nreturn the computed x-intercept or `null` if horizontal\n\nwhen `x` is passed it will set the x-intercept of this line and the y-intercept if appropriate (not vertical)\n\n__slope([slope])__\n\nreturn the computed slope.\n\nWhen `slope` is passed it will set the slope of this line\n\n_note_: this will be `Infinity` if the line is vertical\n\n__intersectSegment(x1, y1, x2, y2)__\n\nreturns:\n\n* `true` when the segment is colinear with this line\n* `false` when the segment does not intersect with this line\n* `Vec2` representing where the point of interesection\n\n__createPerpendicular(vec2)__\n\nreturns a new line instance that is perpendicular to this line and goes through the provided point\n\n__intersectCircle(vec2, radius)__\n\nreturns an array of `Vec2`s which represent the intersections.\n\na length of:\n\n* `0` means no intersections\n* `1` means the line is tangent to the provided circle\n* `2` means the line fully intersects\n\n__solveForX(y)__\n\nreturn the `x` coordinate using the provided `y`\n\n__solveForY(x)__\n\nreturn the `y` coordinate using the provided `x`\n\n__intersect(line2)__ or __intersect(x1, y1, x2, y2)__\n\nreturns a `Vec2` representing the point of intersection if there was one.\n\nIf the lines are colinear, it returns `true`\n\nIf there is no intersection, it returns `false`\n\n__isHorizontal()__\n\nreturn boolean\n\n__isVertical()__\n\nreturn boolean\n\n__closestPointTo(vec2)__\n\nreturns the a `Vec2` representing the closest point on this line to the provided vec2\n\n__containsPoint(vec2)__\n\nreturns true if the provided vec2 is on this line\n\n### license\n\nMIT (see: [license.txt](blob/master/license.txt))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tmpvar/line2.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha -- test/test.js -R spec",
    "minify": "browserify -e line2.js | uglifyjs > line2.min.js",
    "test": "node_modules/mocha/bin/mocha test/test.js -R spec"
  },
  "version": "0.2.1"
}
