{
  "_args": [
    [
      {
        "raw": "polygon",
        "scope": null,
        "escapedName": "polygon",
        "name": "polygon",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen"
    ]
  ],
  "_from": "polygon@latest",
  "_id": "polygon@1.0.2",
  "_inCache": true,
  "_location": "/polygon",
  "_nodeVersion": "0.10.38",
  "_npmUser": {
    "name": "tmpvar",
    "email": "tmpvar@gmail.com"
  },
  "_npmVersion": "2.11.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "polygon",
    "scope": null,
    "escapedName": "polygon",
    "name": "polygon",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/polygon/-/polygon-1.0.2.tgz",
  "_shasum": "b68ba54d8f54e7ab825842a56734bceab3ddb2e1",
  "_shrinkwrap": null,
  "_spec": "polygon",
  "_where": "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen",
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tmpvar/polygon.js/issues"
  },
  "dependencies": {
    "2d-polygon-boolean": "~1.0.0",
    "2d-polygon-self-intersections": "^1.2.2",
    "circle2": "^1.1.0",
    "circumcenter": "^1.0.0",
    "line2": "^0.2.1",
    "segseg": "~0.2.0",
    "vec2": "^1.6.0"
  },
  "description": "utility for working with polygons (arrays of vec2s)",
  "devDependencies": {
    "fc": "^0.1.5",
    "onecolor": "^2.4.0",
    "tap-spec": "~2.1.2",
    "tape": "~3.0.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "b68ba54d8f54e7ab825842a56734bceab3ddb2e1",
    "tarball": "https://registry.npmjs.org/polygon/-/polygon-1.0.2.tgz"
  },
  "gitHead": "2d30f8eab0766c8a68d951fc0f99f5b73564786a",
  "homepage": "https://github.com/tmpvar/polygon.js#readme",
  "keywords": [
    "polygon",
    "vec2",
    "geometry",
    "2d"
  ],
  "license": "MIT",
  "main": "polygon.js",
  "maintainers": [
    {
      "name": "tmpvar",
      "email": "tmpvar@gmail.com"
    }
  ],
  "name": "polygon",
  "optionalDependencies": {},
  "readme": "# polygon.js\n\n## Install\n\n\n__nodejs__\n\n`npm install polygon`\n\n## Usage\n\nCreate a new polygon:\n\n```javascript\nvar p = new Polygon([\n  Vec2(0, 0),\n  Vec2(10, 0),\n  Vec2(0, 10)\n]);\n\n```\n\nYou can pass an array of `Vec2`s, arrays `[x, y]`, or objects `{ x: 10, y: 20 }`\n\n\n## Supported Methods\n\n* `each(function(prev, current, next, idx) {})`\n* `point(idx)` - returns the point at index `idx`. note: this will wrap in both directions\n* `dedupe(returnNew)` - ensure all of the points are unique\n* `insert(vec2, index)` - insert `vec2` at the specified index\n* `remove(vecOrIndex)` - remove the specified `vec2` or numeric index from this polygon\n* `clean(returnNew)` - removes contiguous points that are the same\n* `winding()` - returns the direction in which a polygon is wound (true === clockwise)\n* `rewind(bool)` - rewinds the polygon in the specified direction (true === clockwise)\n* `area()` - computes the area of the polygon\n* `closestPointTo(vec2)` - finds the closest point in this polygon to `vec2`\n* `center()` - returns a `Vec2` at the center of the AABB\n* `scale(amount, origin, returnNew)` - scales this polygon around `origin` (default is `this.center()`) and will return a new polygon if requested with `returnNew`\n* `containsPoint(vec2)` - returns true if `vec2` is inside the polygon\n* `containsPolygon(poly)` - returns true if `poly` is completely contained in this polygon\n* `aabb()` - returns an object `{x:_, y:_, w:_, h:_}` representing the axis-aligned bounding box of this polygyon\n* `offset(amount)` - performs an offset/buffering operation on this polygon and returns a new one\n* `line(index)` - return an array `[startpoint, endpoint]` representing the line at the specified `index`\n* `lines(function(start, end, index) {})` - iterate over the lines in this polygon\n* `selfIntersections` - find self-intersections and return them as a new polygon\n* `pruneSelfIntersections` - remove self intersections from this polygon.  returns an array of polygons\n* `length` - returns the number of points in this polygon\n* `clone` - return a new instance of this polygon\n* `rotate(rads, vec2, returnNew)` - rotate by origin `vec2` (default `this.center()`) by radians `rads` and return a clone if `returnNew` is specified\n* `translate(vec2, returnNew)` - translate by `vec2` and return a clone if `returnNew` is specified\n* `equal(poly)` - return true if this polygon has the same components and the incoming `poly`\n* `contains(thing)` - works with an array of vec2's, an object containing a `.position` and `.radius`, an object populated with x1,y1,x2,y2, an object populated with x,y,w,h, and an object populated with x,y,width,height.  See the tests for more info\n* `union(polygon)` returns a new polygon representing the boolean union of `this` and the incoming `polygon`\n* `cut(polygon)` returns a new polygon representing the boolean cut of `polygon` from `this`\n* `toArray()` convert this polygon into an array of arrays (`[[x, y]]`)\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tmpvar/polygon.js.git"
  },
  "scripts": {
    "test": "tape test/test.js | tap-spec"
  },
  "version": "1.0.2"
}
