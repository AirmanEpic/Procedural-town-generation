{
  "_args": [
    [
      {
        "raw": "circle2@^1.1.0",
        "scope": null,
        "escapedName": "circle2",
        "name": "circle2",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon"
    ]
  ],
  "_from": "circle2@>=1.1.0 <2.0.0",
  "_id": "circle2@1.1.1",
  "_inCache": true,
  "_location": "/circle2",
  "_nodeVersion": "4.4.0-rc.3",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/circle2-1.1.1.tgz_1461460741296_0.486991670448333"
  },
  "_npmUser": {
    "name": "tmpvar",
    "email": "tmpvar@gmail.com"
  },
  "_npmVersion": "2.14.20",
  "_phantomChildren": {},
  "_requested": {
    "raw": "circle2@^1.1.0",
    "scope": null,
    "escapedName": "circle2",
    "name": "circle2",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/polygon"
  ],
  "_resolved": "https://registry.npmjs.org/circle2/-/circle2-1.1.1.tgz",
  "_shasum": "db028816a608d9b19d2165b783512187970790a9",
  "_shrinkwrap": null,
  "_spec": "circle2@^1.1.0",
  "_where": "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon",
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tmpvar/circle2/issues"
  },
  "dependencies": {
    "circumcenter": "^1.0.0",
    "robust-estimate-float": "^1.0.0",
    "subdivide-arc": "^1.0.1",
    "vec2": "^1.6.0"
  },
  "description": "2d circle implementation",
  "devDependencies": {
    "faucet": "0.0.1",
    "tape": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "db028816a608d9b19d2165b783512187970790a9",
    "tarball": "https://registry.npmjs.org/circle2/-/circle2-1.1.1.tgz"
  },
  "gitHead": "62a09a24e3cf8d2c9b2e8936fd201fc8e68fd709",
  "homepage": "https://github.com/tmpvar/circle2#readme",
  "keywords": [
    "2d",
    "circle",
    "vec2"
  ],
  "license": "MIT",
  "main": "circle2.js",
  "maintainers": [
    {
      "name": "tmpvar",
      "email": "tmpvar@gmail.com"
    }
  ],
  "name": "circle2",
  "optionalDependencies": {},
  "peerDependencies": {
    "vec2": "1.x"
  },
  "readme": "## circle2\n\n## install\n\n```\nnpm install circle2\n```\n\n## use\n\n\nnew __Circle__([origin [, radius])\n\nWhere `origin` adheres to the following form:\n\n * `[0, 1]`\n * `{ x: 0, y: 1}`\n\nand `radius` is a number\n\n_Note:_ the arguments to the `Circle` function are optional. If none are passed `circle.position` will be `0, 0` and `circle.radius` will be `1`\n\nYou can also pass in a 3 points and have the circle computed from them:\n\n```javascript\n\nvar circle = Circle([\n  [0, 0],\n  [10, 0],\n  [0, 10]\n])\n\nconsole.log(circle.radius()); // 10\nconsole.log(circle.position); // { x: 0, y: 0 }\n\n```\n\nor an 3-item array of `Vec2`\n\n```javascript\n\nvar circle = Circle([\n  Vec2(0, 0),\n  Vec2(10, 0),\n  Vec2(0, 10)\n])\n\nconsole.log(circle.radius()); // 10\nconsole.log(circle.position); // { x: 0, y: 0 }\n\n```\n\n_Note:_ changing the passed `Vec2`s will change the circle\n\n\n### Instance Methods\n\n__radius__([newRadius])\n\nGet/Set the radius of the circle\n\n__containsPoint__(point)\n\nWhere `point` looks like one of the following:\n\n * `[0, 1]`\n * `{ x: 0, y: 1 }`\n * `new Vec2(0, 1)`\n\nThis function will return `true` if the passed point is inside or right on the boundary of the circle.\n\n```javascript\nvar Circle = require('circle2');\n\nvar c = Circle()\n\nconsole.log(c.contains([10, 0])) // false\n\nc.radius(10);\n\nconsole.log(c.contains([10, 0])); // true\n```\n\n__contains__(thing)\n\nWhere `thing` meets the following criteria:\n\n * has `.position` and `.radius()` - _circle_\n * has a function `.points()` or array `.points` - _polygon_\n * has `.x1`, `.y1`, `.x2`, and `.y2` - _rectangle_\n * has `.x`, `.y`, `.w`, and `.h` - _rectangle_\n * has `.x`, `.y`, `.width`, and `.height` - _rectangle_\n\nThis method will return `true` if the passed `thing` is completely inside, and false otherwise.\n\n```javascript\nvar Circle = require('circle2');\n\nvar center = [0, 0];\n\nvar c = new Circle(center, 10)\nvar c2 = new Circle(center, 5)\n\nconsole.log(c.contains(c2)); // true\n```\n\n_Note_: if the points of `thing` are on the circumference of the circle, this method will return `true`\n\n__change__(fn)\n\nThis is a method that you want to have called any time the circle changes.  Either in `radius` or `position`\n\n```javascript\nvar c = new Circle();\n\nvar trackCircleRadius = c.change(function(circle) {\n  // do stuff. c === circle\n});\n\nc.radius(10); // this will call `trackCircleRadius`\n```\n\n__ignore__([fn])\n\nTakes an optional `fn` parameter which if passed will remove the specified listener.\n\nIf no `fn` is passed, _all_ the listeners will be removed.\n\n__notify__()\n\nForce listeners to be called.\n\n__area__()\n\nReturns the area `PI * r^2`\n\n__circumference__()\n\nReturns the circumference `PI * r*2`\n\n__intersectCircle__(circle)\n\nPerforms an intersection between this circle and the incoming. Results are as follows:\n\n * `false` - no intersection or one circle is contained in the other\n * `[]` - same circles\n * `[Vec2]` - single intersection\n * `[Vec2, Vec2]` - two intersection points\n\n__toSegments__([segments])\n\nConvert this circle into a series of points representing the outline of this circle\n\n\n### license\n\nMIT (see: [license.txt](blob/master/license.txt))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tmpvar/circle2.git"
  },
  "scripts": {
    "minify": "cat circle2.js | uglifyjs > circle2.min.js",
    "test": "tape test/test.js | faucet"
  },
  "version": "1.1.1"
}
