{
  "_args": [
    [
      {
        "raw": "vec2@^1.6.0",
        "scope": null,
        "escapedName": "vec2",
        "name": "vec2",
        "rawSpec": "^1.6.0",
        "spec": ">=1.6.0 <2.0.0",
        "type": "range"
      },
      "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon"
    ]
  ],
  "_from": "vec2@>=1.6.0 <2.0.0",
  "_id": "vec2@1.6.0",
  "_inCache": true,
  "_location": "/vec2",
  "_nodeVersion": "0.10.31",
  "_npmUser": {
    "name": "tmpvar",
    "email": "tmpvar@gmail.com"
  },
  "_npmVersion": "2.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vec2@^1.6.0",
    "scope": null,
    "escapedName": "vec2",
    "name": "vec2",
    "rawSpec": "^1.6.0",
    "spec": ">=1.6.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/circle2",
    "/polygon"
  ],
  "_resolved": "https://registry.npmjs.org/vec2/-/vec2-1.6.0.tgz",
  "_shasum": "d2886b95fbbf638fa583aedf790ed0ee0df12185",
  "_shrinkwrap": null,
  "_spec": "vec2@^1.6.0",
  "_where": "E:\\Docs\\Portfolio 2\\Website Building\\procedural house gen\\node_modules\\polygon",
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com",
    "url": "http://tmpvar.com"
  },
  "bugs": {
    "url": "https://github.com/tmpvar/vec2.js/issues"
  },
  "dependencies": {},
  "description": "manipulate vectors in 2d",
  "devDependencies": {
    "JSON2": "~0.1.0",
    "istanbul": "~0.2.3",
    "mocha": "~1.17.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d2886b95fbbf638fa583aedf790ed0ee0df12185",
    "tarball": "https://registry.npmjs.org/vec2/-/vec2-1.6.0.tgz"
  },
  "gitHead": "f6ff2b51815f0a7a80f8beff1fb532327a92d314",
  "homepage": "https://github.com/tmpvar/vec2.js",
  "keywords": [
    "2d",
    "vec",
    "vector",
    "geometry"
  ],
  "main": "vec2.js",
  "maintainers": [
    {
      "name": "tmpvar",
      "email": "tmpvar@gmail.com"
    }
  ],
  "name": "vec2",
  "optionalDependencies": {},
  "readme": "# Vec2.js\n\n![travis](https://api.travis-ci.org/tmpvar/vec2.js.png)\n\n[![browser support](https://ci.testling.com/tmpvar/vec2.js.png)](http://ci.testling.com/tmpvar/vec2.js)\n\n  A generic library useful when you need to work with points/vectors in 2d space.\n\n## Use\n\n```javascript\n  var a = new Vec2(10, 10), // new keyword\n      b = Vec2(100, 10); // call the constructor directly\n\n  console.log(a.distance(b)); // 90\n```\n\n**Stuff to Note**: most of the Vec2's methods take a `returnNew` as the last parameter.  If passed a truthy value, a new vector will be returned to you.  Otherwise the operation will be applied to `this` and `this` will be returned.\n\nAlso, since `Infinity`and `NaN` are so insidious, this library will throw as soon as it detects either of these so you can take action to fix your data/algorithm.\n\n\n## Supported operations\n\n__change__([fn])\n\nAdd an observer `fn` that will be called whenever this vector changes.  Calling this method without a function causes it to notify observers.\n\n`fn` signature: `function(vec, prev) {}` - where `prev` is a clone of the vector before the last operation.\n\nthis function returns the passed `fn`\n\n_returns_: `Vec2`\n\n<hr />\n\n__ignore__([fn])\n\nPass a `fn` to remove it from the observers list. Calling this function without a `fn` will remove all observers.\n\n_returns_: `Vec2`\n\n<hr />\n\n__set__(x, y [, notify]) or __set__(vec2 [, notify])\n\nSets the `x` and `y` coordinates of this vector.  If `false` is passed for `notify`, none of the observers will be called.\n\n_returns_: `Vec2`\n\n<hr />\n\n__zero__()\n\nSets the `x` and `y` of this vector to `0`\n\n_returns_: `Vec2`\n\n<hr />\n\n__clone__()\n\nReturns a clone of this vector.\n\n_Note_: this does not clone observers\n\n_returns_: `Vec2`\n\n<hr />\n\n__negate__([returnNew])\n\nNegate the `x` and `y` coords of this vector.  If `returnNew` is truthy, a new vector with the negated coordinates will be returned.\n\n_returns_: `Vec2`\n\n<hr />\n\n__add__(x, y [, returnNew]) or __add__(array, [, returnNew]) or __add__(vec2 [, returnNew])\n\nAdd the `x` and `y` to this vector's coordinates.\n\nIf `returnNew` is truthy, return a new vector containing the resulting coordinates. Otherwise apply them to this vector and return it.\n\n_returns_: `Vec2`\n\n<hr />\n\n__subtract__(x, y [, returnNew]) or __subtract__(array, [, returnNew]) or __subtract__(vec2 [, returnNew])\n\n_returns_: `Vec2`\n\n<hr />\n\n__multiply__(scalar [, returnNew]) or __multiply__(x, y [, returnNew]) or __multiply__(array, [, returnNew]) or __multiply__(vec2 [, returnNew])\n\n\nMultiply this vectors components with the incoming, returning a clone if `returnNew` is truthy.\n\n_returns_: `Vec2`\n\n<hr />\n\n__divide__(scalar [, returnNew]) or __divide__(x, y [, returnNew]) or __divide__(array, [, returnNew]) or __divide__(vec2 [, returnNew])\n\n\nDivide this vectors components by the incoming, returning a clone if `returnNew` is truthy.\n\n_note_: this method will throw if you attempt to divide by zero or pass values that cause NaNs\n\n_returns_: `Vec2`\n\n<hr />\n\n\n__rotate__(radians [, inverse [, returnNew]])\n\nRotate this vector's cordinates around `(0,0)`.  If `returnNew` is specified, a new `Vec2` will be created and populated with the result and returned.  Otherwise the result is applied to this vector and `this` is returned.\n\n`inverse` - inverts the direction of the rotation\n\n`returnNew` - causes the result to be applied to a new `Vec2`, otherwise the result is applied to `this`\n\n_returns_: `Vec2`\n\n<hr />\n\n__length__()\n\nReturns the length of this vector from `(0,0)`\n\n_returns_: `double`\n\n<hr />\n\n__lengthSquared__()\n\nReturns the length of this vector prior to the `Math.sqrt` call.\n\nThis is usefull when you don't need to know the actual distance, but need a normalized value to compare with another `Vec2#lengthSquared` or similar.\n\n_returns_: `double`\n\n<hr />\n\n\n__distance__(vec2)\n\n_returns_: the distance between this vector and the incoming\n\n<hr />\n\n__nearest__(array)\n\n_returns_: closest vector in array to this vector.\n\n<hr />\n\n__normalize__([returnNew])\n\nNormalizes this vector.  If `returnNew` is truthy, a new vector populated with the normalized coordinates will be returned.\n\n_returns_: `Vec2`\n\n<hr />\n\n\n__equal__(vec2) or __equal__(x, y) or __equal__(array)\n\nreturns true if the incoming coordinates are the same as this vector's\n\n_returns_: `boolean`\n\n__abs__([returnNew])\n\nReturn a `Vec2` that contains the absolute value of each of this vector's parts.\n\nIf `returnNew` is truthy, create a new `Vec2` and return it. Otherwise apply the absolute values to to `this`.\n\n_returns_: `Vec2`\n\n<hr />\n\n__min__(vec)\n\nReturn a `Vec2` consisting of the smallest values from this vector and the incoming\n\nWhen returnNew is truthy, a new `Vec2` will be returned otherwise the minimum values in either this or `vec` will be applied to this vector.\n\n_returns_: `Vec2`\n\n<hr />\n\n__max__(vec)\n\nReturn a `Vec2` consisting of the largest values from this vector and the incoming\n\nWhen returnNew is truthy, a new `Vec2` will be returned otherwise the maximum values in either `this` or `vec` will be applied to this vector.\n\n_returns_: `Vec2`\n\n<hr />\n\n__clamp__(low, high [, returnNew])\n\nClamp the coordinates of this vector to the high/low of the incoming vec2s.  If `returnNew` apply the result to the new vector and return.  Otherwise apply to this vector.\n\n_returns_: `Vec2`\n\n<hr />\n\n__lerp__(vec, amount [, returnNew])\n\nPerform linear interpolation between this vector and the incoming.\n\n`amount` - the percentage along the path to place the vector\n\n`returnNew` - if `truthy`, apply the result to a new vector and return it, otherwise return `this`\n\n\n_returns_: `Vec2`\n\n<hr />\n\n__skew__([returnNew])\n\nReturns a vector set with the `(-y,x)` coordinates of this vector.  If `returnNew` a new vector is created and the operation is applied to the new vector.\n\n\n_returns_: `Vec2`\n\n<hr />\n\n__dot__()\n\n_returns_: `double`\n\n<hr />\n\n__perpDot__()\n\n_returns_: `double`\n\n<hr />\n\n__angleTo__(vec)\n\nreturns the angle from this vector to the incoming.\n\n_returns_: `double`\n\n<hr />\n\n__isPointOnLine__(start, end)\n\nwhere `start` and `end` are vec2-like (e.g. `start.x` and `start.y`)\n\n_returns_: `boolean`\n\n<hr />\n\n__toArray__()\n\n_returns_: `[x, y]`\n\n<hr />\n\n__fromArray__(array)\n\nApplies the `[0]` to `this.x` and `[1]` to `this.y`\n\n_returns_: `Vec2`\n\n<hr />\n\n__toJSON__()\n\n_returns_: `{ x: ..., y: ...}`\n\n<hr />\n\n__toString__()\n\n_returns_: `'(x, y)'`\n\n## Install\n\n### Browser\n\n```html\n<script type=\"text/javascript\" src=\"https://raw.github.com/tmpvar/vec2.js/master/vec2.min.js\"></script>\n<script type=\"text/javascript\">\n   var v = new Vec2();\n</script>\n```\n\n### Node\n\ninstall with npm\n\n    npm install vec2\n\nand then require it!\n\n    var Vec2 = require('vec2');\n\n\n## License\n\nMIT (see [LICENSE.txt](LICENSE.txt))",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tmpvar/vec2.js.git"
  },
  "scripts": {
    "bench": "./test/bench/run.sh",
    "cover": "istanbul cover _mocha -- test/test.js -R spec",
    "minify": "cat vec2.js | uglifyjs > vec2.min.js",
    "test": "mocha test/test.js"
  },
  "testling": {
    "browsers": [
      "ie6",
      "ie7",
      "ie8",
      "ie9",
      "firefox/15",
      "chrome/22",
      "opera/12",
      "safari/5.1"
    ],
    "harness": "mocha-bdd",
    "files": [
      "test/test.js"
    ]
  },
  "version": "1.6.0"
}
